// File generated by idl2d from
//   ../DeckLinkAPIDeckControl.idl
module decklink4d.bmd.decklinkapideckcontrol;

import decklink4d.port;
import decklink4d.bmd.decklinkapitypes;

/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

// Type Declarations

// Enumeration Mapping

alias uint BMDDeckControlStatusFlags;
alias uint BMDDeckControlExportModeOpsFlags; 

/* Enum BMDDeckControlMode - DeckControl mode */

enum 
		/+[v1_enum]+/ /+	_BMDDeckControlMode+/
{
    bmdDeckControlNotOpened                                      = /* 'ntop' */ 0x6E746F70,
    bmdDeckControlVTRControlMode                                 = /* 'vtrc' */ 0x76747263,
    bmdDeckControlExportMode                                     = /* 'expm' */ 0x6578706D,
    bmdDeckControlCaptureMode                                    = /* 'capm' */ 0x6361706D
}
alias int	_BMDDeckControlMode;
alias int BMDDeckControlMode;

/* Enum BMDDeckControlEvent - DeckControl event */

enum 
		/+[v1_enum]+/ /+	_BMDDeckControlEvent+/
{
    bmdDeckControlAbortedEvent                                   = /* 'abte' */ 0x61627465,	// This event is triggered when a capture or edit-to-tape operation is aborted.

    /* Export-To-Tape events */

    bmdDeckControlPrepareForExportEvent                          = /* 'pfee' */ 0x70666565,	// This event is triggered a few frames before reaching the in-point. IDeckLinkInput::StartScheduledPlayback() should be called at this point.
    bmdDeckControlExportCompleteEvent                            = /* 'exce' */ 0x65786365,	// This event is triggered a few frames after reaching the out-point. At this point, it is safe to stop playback.

    /* Capture events */

    bmdDeckControlPrepareForCaptureEvent                         = /* 'pfce' */ 0x70666365,	// This event is triggered a few frames before reaching the in-point. The serial timecode attached to IDeckLinkVideoInputFrames is now valid.
    bmdDeckControlCaptureCompleteEvent                           = /* 'ccev' */ 0x63636576
}
alias int	_BMDDeckControlEvent;
alias int BMDDeckControlEvent;

/* Enum BMDDeckControlVTRControlState - VTR Control state */

enum 
		/+[v1_enum]+/ /+	_BMDDeckControlVTRControlState+/
{
    bmdDeckControlNotInVTRControlMode                            = /* 'nvcm' */ 0x6E76636D,
    bmdDeckControlVTRControlPlaying                              = /* 'vtrp' */ 0x76747270,
    bmdDeckControlVTRControlRecording                            = /* 'vtrr' */ 0x76747272,
    bmdDeckControlVTRControlStill                                = /* 'vtra' */ 0x76747261,
    bmdDeckControlVTRControlShuttleForward                       = /* 'vtsf' */ 0x76747366,
    bmdDeckControlVTRControlShuttleReverse                       = /* 'vtsr' */ 0x76747372,
    bmdDeckControlVTRControlJogForward                           = /* 'vtjf' */ 0x76746A66,
    bmdDeckControlVTRControlJogReverse                           = /* 'vtjr' */ 0x76746A72,
    bmdDeckControlVTRControlStopped                              = /* 'vtro' */ 0x7674726F
}
alias int	_BMDDeckControlVTRControlState;
alias int BMDDeckControlVTRControlState;

/* Enum BMDDeckControlStatusFlags - Deck Control status flags */

/+[v1_enum]+/ enum /+	_BMDDeckControlStatusFlags+/ : int 
{
    bmdDeckControlStatusDeckConnected                            = 1 << 0,
    bmdDeckControlStatusRemoteMode                               = 1 << 1,
    bmdDeckControlStatusRecordInhibited                          = 1 << 2,
    bmdDeckControlStatusCassetteOut                              = 1 << 3
}
alias int	_BMDDeckControlStatusFlags;

/* Enum BMDDeckControlExportModeOpsFlags - Export mode flags */

/+[v1_enum]+/ enum /+	_BMDDeckControlExportModeOpsFlags+/ : int 
{
    bmdDeckControlExportModeInsertVideo                          = 1 << 0,
    bmdDeckControlExportModeInsertAudio1                         = 1 << 1,
    bmdDeckControlExportModeInsertAudio2                         = 1 << 2,
    bmdDeckControlExportModeInsertAudio3                         = 1 << 3,
    bmdDeckControlExportModeInsertAudio4                         = 1 << 4,
    bmdDeckControlExportModeInsertAudio5                         = 1 << 5,
    bmdDeckControlExportModeInsertAudio6                         = 1 << 6,
    bmdDeckControlExportModeInsertAudio7                         = 1 << 7,
    bmdDeckControlExportModeInsertAudio8                         = 1 << 8,
    bmdDeckControlExportModeInsertAudio9                         = 1 << 9,
    bmdDeckControlExportModeInsertAudio10                        = 1 << 10,
    bmdDeckControlExportModeInsertAudio11                        = 1 << 11,
    bmdDeckControlExportModeInsertAudio12                        = 1 << 12,
    bmdDeckControlExportModeInsertTimeCode                       = 1 << 13,
    bmdDeckControlExportModeInsertAssemble                       = 1 << 14,
    bmdDeckControlExportModeInsertPreview                        = 1 << 15,
    bmdDeckControlUseManualExport                                = 1 << 16
}
alias int	_BMDDeckControlExportModeOpsFlags;

/* Enum BMDDeckControlError - Deck Control error */

enum 
		/+[v1_enum]+/ /+	_BMDDeckControlError+/
{
    bmdDeckControlNoError                                        = /* 'noer' */ 0x6E6F6572,
    bmdDeckControlModeError                                      = /* 'moer' */ 0x6D6F6572,
    bmdDeckControlMissedInPointError                             = /* 'mier' */ 0x6D696572,
    bmdDeckControlDeckTimeoutError                               = /* 'dter' */ 0x64746572,
    bmdDeckControlCommandFailedError                             = /* 'cfer' */ 0x63666572,
    bmdDeckControlDeviceAlreadyOpenedError                       = /* 'dalo' */ 0x64616C6F,
    bmdDeckControlFailedToOpenDeviceError                        = /* 'fder' */ 0x66646572,
    bmdDeckControlInLocalModeError                               = /* 'lmer' */ 0x6C6D6572,
    bmdDeckControlEndOfTapeError                                 = /* 'eter' */ 0x65746572,
    bmdDeckControlUserAbortError                                 = /* 'uaer' */ 0x75616572,
    bmdDeckControlNoTapeInDeckError                              = /* 'nter' */ 0x6E746572,
    bmdDeckControlNoVideoFromCardError                           = /* 'nvfc' */ 0x6E766663,
    bmdDeckControlNoCommunicationError                           = /* 'ncom' */ 0x6E636F6D,
    bmdDeckControlBufferTooSmallError                            = /* 'btsm' */ 0x6274736D,
    bmdDeckControlBadChecksumError                               = /* 'chks' */ 0x63686B73,
    bmdDeckControlUnknownError                                   = /* 'uner' */ 0x756E6572
}
alias int	_BMDDeckControlError;
alias int BMDDeckControlError;

// Forward Declarations

/+ interface IDeckLinkDeckControlStatusCallback; +/
/+ interface IDeckLinkDeckControl; +/

/* Interface IDeckLinkDeckControlStatusCallback - Deck control state change callback. */

const GUID IID_IDeckLinkDeckControlStatusCallback = IDeckLinkDeckControlStatusCallback.iid;

interface IDeckLinkDeckControlStatusCallback : IUnknown
{
extern(System):
    static const GUID iid = { 0x53436FFB,0xB434,0x4906,[ 0xBA,0xDC,0xAE,0x30,0x60,0xFF,0xE8,0xEF ] };
    HRESULT TimecodeUpdate(in BMDTimecodeBCD currentTimecode);
    HRESULT VTRControlStateChanged(in BMDDeckControlVTRControlState newState, in BMDDeckControlError error);
    HRESULT DeckControlEventReceived(in BMDDeckControlEvent event, in BMDDeckControlError error);
    HRESULT DeckControlStatusChanged(in BMDDeckControlStatusFlags flags, in uint mask);
};

/* Interface IDeckLinkDeckControl - Deck Control main interface */

const GUID IID_IDeckLinkDeckControl = IDeckLinkDeckControl.iid;

interface IDeckLinkDeckControl : IUnknown
{
extern(System):
    static const GUID iid = { 0x8E1C3ACE,0x19C7,0x4E00,[ 0x8B,0x92,0xD8,0x04,0x31,0xD9,0x58,0xBE ] };
    HRESULT Open(in BMDTimeScale timeScale, in BMDTimeValue timeValue, in BOOL timecodeIsDropFrame, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT Close(in BOOL standbyOn);
    HRESULT GetCurrentState(/+[out]+/ BMDDeckControlMode *mode, 
		/+[out]+/ BMDDeckControlVTRControlState *vtrControlState, 
		/+[out]+/ BMDDeckControlStatusFlags *flags);
    HRESULT SetStandby(in BOOL standbyOn);
    HRESULT SendCommand(in ubyte *inBuffer, in uint inBufferSize, 
		/+[out]+/ ubyte *outBuffer, 
		/+[out]+/ uint *outDataSize, in uint outBufferSize, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT Play(/+[out]+/ BMDDeckControlError *error);
    HRESULT Stop(/+[out]+/ BMDDeckControlError *error);
    HRESULT TogglePlayStop(/+[out]+/ BMDDeckControlError *error);
    HRESULT Eject(/+[out]+/ BMDDeckControlError *error);
    HRESULT GoToTimecode(in BMDTimecodeBCD timecode, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT FastForward(in BOOL viewTape, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT Rewind(in BOOL viewTape, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT StepForward(/+[out]+/ BMDDeckControlError *error);
    HRESULT StepBack(/+[out]+/ BMDDeckControlError *error);
    HRESULT Jog(in double rate, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT Shuttle(in double rate, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT GetTimecodeString(/+[out]+/ BMDSTR *currentTimeCode, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT GetTimecode(/+[out]+/ IDeckLinkTimecode *currentTimecode, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT GetTimecodeBCD(/+[out]+/ BMDTimecodeBCD *currentTimecode, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT SetPreroll(in uint prerollSeconds);
    HRESULT GetPreroll(/+[out]+/ uint *prerollSeconds);
    HRESULT SetExportOffset(in int exportOffsetFields);
    HRESULT GetExportOffset(/+[out]+/ int *exportOffsetFields);
    HRESULT GetManualExportOffset(/+[out]+/ int *deckManualExportOffsetFields);
    HRESULT SetCaptureOffset(in int captureOffsetFields);
    HRESULT GetCaptureOffset(/+[out]+/ int *captureOffsetFields);
    HRESULT StartExport(in BMDTimecodeBCD inTimecode, in BMDTimecodeBCD outTimecode, in BMDDeckControlExportModeOpsFlags exportModeOps, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT StartCapture(in BOOL useVITC, in BMDTimecodeBCD inTimecode, in BMDTimecodeBCD outTimecode, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT GetDeviceID(/+[out]+/ ushort *deviceId, 
		/+[out]+/ BMDDeckControlError *error);
    HRESULT Abort();
    HRESULT CrashRecordStart(/+[out]+/ BMDDeckControlError *error);
    HRESULT CrashRecordStop(/+[out]+/ BMDDeckControlError *error);
    HRESULT SetCallback(/+[in]+/ IDeckLinkDeckControlStatusCallback callback);
};
