// File generated by idl2d from
//   ../DeckLinkAPIStreaming.idl
module decklinkapistreaming;
import decklink4d.port;
import decklinkapi;

/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* Enum BMDStreamingDeviceMode - Device modes */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingDeviceMode+/
{
    bmdStreamingDeviceIdle                                       = /* 'idle' */ 0x69646C65,
    bmdStreamingDeviceEncoding                                   = /* 'enco' */ 0x656E636F,
    bmdStreamingDeviceStopping                                   = /* 'stop' */ 0x73746F70,
    bmdStreamingDeviceUnknown                                    = /* 'munk' */ 0x6D756E6B
}
alias int	_BMDStreamingDeviceMode;
alias int BMDStreamingDeviceMode;

/* Enum BMDStreamingEncodingFrameRate - Encoded frame rates */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingEncodingFrameRate+/
{

    /* Interlaced rates */

    bmdStreamingEncodedFrameRate50i                              = /* 'e50i' */ 0x65353069,
    bmdStreamingEncodedFrameRate5994i                            = /* 'e59i' */ 0x65353969,
    bmdStreamingEncodedFrameRate60i                              = /* 'e60i' */ 0x65363069,

    /* Progressive rates */

    bmdStreamingEncodedFrameRate2398p                            = /* 'e23p' */ 0x65323370,
    bmdStreamingEncodedFrameRate24p                              = /* 'e24p' */ 0x65323470,
    bmdStreamingEncodedFrameRate25p                              = /* 'e25p' */ 0x65323570,
    bmdStreamingEncodedFrameRate2997p                            = /* 'e29p' */ 0x65323970,
    bmdStreamingEncodedFrameRate30p                              = /* 'e30p' */ 0x65333070,
    bmdStreamingEncodedFrameRate50p                              = /* 'e50p' */ 0x65353070,
    bmdStreamingEncodedFrameRate5994p                            = /* 'e59p' */ 0x65353970,
    bmdStreamingEncodedFrameRate60p                              = /* 'e60p' */ 0x65363070
}
alias int	_BMDStreamingEncodingFrameRate;
alias int BMDStreamingEncodingFrameRate;

/* Enum BMDStreamingEncodingSupport - Output encoding mode supported flag */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingEncodingSupport+/
{
    bmdStreamingEncodingModeNotSupported                         = 0,
    bmdStreamingEncodingModeSupported,                          
    bmdStreamingEncodingModeSupportedWithChanges
}
alias int	_BMDStreamingEncodingSupport;
alias int BMDStreamingEncodingSupport;

/* Enum BMDStreamingVideoCodec - Video codecs */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingVideoCodec+/
{
    bmdStreamingVideoCodecH264                                   = /* 'H264' */ 0x48323634
}
alias int	_BMDStreamingVideoCodec;
alias int BMDStreamingVideoCodec;

/* Enum BMDStreamingH264Profile - H264 encoding profile */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingH264Profile+/
{
    bmdStreamingH264ProfileHigh                                  = /* 'high' */ 0x68696768,
    bmdStreamingH264ProfileMain                                  = /* 'main' */ 0x6D61696E,
    bmdStreamingH264ProfileBaseline                              = /* 'base' */ 0x62617365
}
alias int	_BMDStreamingH264Profile;
alias int BMDStreamingH264Profile;

/* Enum BMDStreamingH264Level - H264 encoding level */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingH264Level+/
{
    bmdStreamingH264Level12                                      = /* 'lv12' */ 0x6C763132,
    bmdStreamingH264Level13                                      = /* 'lv13' */ 0x6C763133,
    bmdStreamingH264Level2                                       = /* 'lv2 ' */ 0x6C763220,
    bmdStreamingH264Level21                                      = /* 'lv21' */ 0x6C763231,
    bmdStreamingH264Level22                                      = /* 'lv22' */ 0x6C763232,
    bmdStreamingH264Level3                                       = /* 'lv3 ' */ 0x6C763320,
    bmdStreamingH264Level31                                      = /* 'lv31' */ 0x6C763331,
    bmdStreamingH264Level32                                      = /* 'lv32' */ 0x6C763332,
    bmdStreamingH264Level4                                       = /* 'lv4 ' */ 0x6C763420,
    bmdStreamingH264Level41                                      = /* 'lv41' */ 0x6C763431,
    bmdStreamingH264Level42                                      = /* 'lv42' */ 0x6C763432
}
alias int	_BMDStreamingH264Level;
alias int BMDStreamingH264Level;

/* Enum BMDStreamingH264EntropyCoding - H264 entropy coding */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingH264EntropyCoding+/
{
    bmdStreamingH264EntropyCodingCAVLC                           = /* 'EVLC' */ 0x45564C43,
    bmdStreamingH264EntropyCodingCABAC                           = /* 'EBAC' */ 0x45424143
}
alias int	_BMDStreamingH264EntropyCoding;
alias int BMDStreamingH264EntropyCoding;

/* Enum BMDStreamingAudioCodec - Audio codecs */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingAudioCodec+/
{
    bmdStreamingAudioCodecAAC                                    = /* 'AAC ' */ 0x41414320
}
alias int	_BMDStreamingAudioCodec;
alias int BMDStreamingAudioCodec;

/* Enum BMDStreamingEncodingModePropertyID - Encoding mode properties */

enum 
		/+[v1_enum]+/ /+	_BMDStreamingEncodingModePropertyID+/
{

    /* Integers, Video Properties */

    bmdStreamingEncodingPropertyVideoFrameRate                   = /* 'vfrt' */ 0x76667274,	// Uses values of type BMDStreamingEncodingFrameRate
    bmdStreamingEncodingPropertyVideoBitRateKbps                 = /* 'vbrt' */ 0x76627274,

    /* Integers, H264 Properties */

    bmdStreamingEncodingPropertyH264Profile                      = /* 'hprf' */ 0x68707266,
    bmdStreamingEncodingPropertyH264Level                        = /* 'hlvl' */ 0x686C766C,
    bmdStreamingEncodingPropertyH264EntropyCoding                = /* 'hent' */ 0x68656E74,

    /* Flags, H264 Properties */

    bmdStreamingEncodingPropertyH264HasBFrames                   = /* 'hBfr' */ 0x68426672,

    /* Integers, Audio Properties */

    bmdStreamingEncodingPropertyAudioCodec                       = /* 'acdc' */ 0x61636463,
    bmdStreamingEncodingPropertyAudioSampleRate                  = /* 'asrt' */ 0x61737274,
    bmdStreamingEncodingPropertyAudioChannelCount                = /* 'achc' */ 0x61636863,
    bmdStreamingEncodingPropertyAudioBitRateKbps                 = /* 'abrt' */ 0x61627274
}
alias int	_BMDStreamingEncodingModePropertyID;
alias int BMDStreamingEncodingModePropertyID;

// Forward Declarations

/+ interface IBMDStreamingDeviceNotificationCallback; +/
/+ interface IBMDStreamingH264InputCallback; +/
/+ interface IBMDStreamingDiscovery; +/
/+ interface IBMDStreamingVideoEncodingMode; +/
/+ interface IBMDStreamingMutableVideoEncodingMode; +/
/+ interface IBMDStreamingVideoEncodingModePresetIterator; +/
/+ interface IBMDStreamingDeviceInput; +/
/+ interface IBMDStreamingH264NALPacket; +/
/+ interface IBMDStreamingAudioPacket; +/
/+ interface IBMDStreamingMPEG2TSPacket; +/
/+ interface IBMDStreamingH264NALParser; +/

/* Interface IBMDStreamingDeviceNotificationCallback - Device notification callbacks. */

const GUID IID_IBMDStreamingDeviceNotificationCallback = IBMDStreamingDeviceNotificationCallback.iid;

interface IBMDStreamingDeviceNotificationCallback : IUnknown
{
extern(System):
    static const GUID iid = { 0xF9531D64,0x3305,0x4B29,[ 0xA3,0x87,0x7F,0x74,0xBB,0x0D,0x0E,0x84 ] };
    HRESULT StreamingDeviceArrived(/+[in]+/ IDeckLink device);
    HRESULT StreamingDeviceRemoved(/+[in]+/ IDeckLink device);
    HRESULT StreamingDeviceModeChanged(/+[in]+/ IDeckLink device, in BMDStreamingDeviceMode mode);
};

/* Interface IBMDStreamingH264InputCallback - H264 input callbacks. */

const GUID IID_IBMDStreamingH264InputCallback = IBMDStreamingH264InputCallback.iid;

interface IBMDStreamingH264InputCallback : IUnknown
{
extern(System):
    static const GUID iid = { 0x823C475F,0x55AE,0x46F9,[ 0x89,0x0C,0x53,0x7C,0xC5,0xCE,0xDC,0xCA ] };
    HRESULT H264NALPacketArrived(/+[in]+/ IBMDStreamingH264NALPacket nalPacket);
    HRESULT H264AudioPacketArrived(/+[in]+/ IBMDStreamingAudioPacket audioPacket);
    HRESULT MPEG2TSPacketArrived(/+[in]+/ IBMDStreamingMPEG2TSPacket tsPacket);
    HRESULT H264VideoInputConnectorScanningChanged();
    HRESULT H264VideoInputConnectorChanged();
    HRESULT H264VideoInputModeChanged();
};

/* Interface IBMDStreamingDiscovery - Installs device notifications */

const GUID IID_IBMDStreamingDiscovery = IBMDStreamingDiscovery.iid;

interface IBMDStreamingDiscovery : IUnknown
{
extern(System):
    static const GUID iid = { 0x2C837444,0xF989,0x4D87,[ 0x90,0x1A,0x47,0xC8,0xA3,0x6D,0x09,0x6D ] };
    HRESULT InstallDeviceNotifications(/+[in]+/ IBMDStreamingDeviceNotificationCallback theCallback);
    HRESULT UninstallDeviceNotifications();
};

/* Interface IBMDStreamingVideoEncodingMode - Represents an encoded video mode. */

const GUID IID_IBMDStreamingVideoEncodingMode = IBMDStreamingVideoEncodingMode.iid;

interface IBMDStreamingVideoEncodingMode : IUnknown
{
extern(System):
    static const GUID iid = { 0x1AB8035B,0xCD13,0x458D,[ 0xB6,0xDF,0x5E,0x8F,0x7C,0x21,0x41,0xD9 ] };
    HRESULT GetName(/+[out]+/ BSTR *name);
    uint GetPresetID();
    uint GetSourcePositionX();
    uint GetSourcePositionY();
    uint GetSourceWidth();
    uint GetSourceHeight();
    uint GetDestWidth();
    uint GetDestHeight();
    HRESULT GetFlag(in BMDStreamingEncodingModePropertyID cfgID, 
		/+[out]+/ BOOL* value);
    HRESULT GetInt(in BMDStreamingEncodingModePropertyID cfgID, 
		/+[out]+/ LONGLONG* value);
    HRESULT GetFloat(in BMDStreamingEncodingModePropertyID cfgID, 
		/+[out]+/ double* value);
    HRESULT GetString(in BMDStreamingEncodingModePropertyID cfgID, 
		/+[out]+/ BSTR *value);
    HRESULT CreateMutableVideoEncodingMode(/+[out]+/ IBMDStreamingMutableVideoEncodingMode * newEncodingMode);
};

/* Interface IBMDStreamingMutableVideoEncodingMode - Represents a mutable encoded video mode. */

const GUID IID_IBMDStreamingMutableVideoEncodingMode = IBMDStreamingMutableVideoEncodingMode.iid;

interface IBMDStreamingMutableVideoEncodingMode : IBMDStreamingVideoEncodingMode
{
    static const GUID iid = { 0x19BF7D90,0x1E0A,0x400D,[ 0xB2,0xC6,0xFF,0xC4,0xE7,0x8A,0xD4,0x9D ] };
    HRESULT SetSourceRect(in uint posX, in uint posY, in uint width, in uint height);
    HRESULT SetDestSize(in uint width, in uint height);
    HRESULT SetFlag(in BMDStreamingEncodingModePropertyID cfgID, in BOOL value);
    HRESULT SetInt(in BMDStreamingEncodingModePropertyID cfgID, in LONGLONG value);
    HRESULT SetFloat(in BMDStreamingEncodingModePropertyID cfgID, in double value);
    HRESULT SetString(in BMDStreamingEncodingModePropertyID cfgID, in BSTR value);
};

/* Interface IBMDStreamingVideoEncodingModePresetIterator - Enumerates encoding mode presets */

const GUID IID_IBMDStreamingVideoEncodingModePresetIterator = IBMDStreamingVideoEncodingModePresetIterator.iid;

interface IBMDStreamingVideoEncodingModePresetIterator : IUnknown
{
extern(System):
    static const GUID iid = { 0x7AC731A3,0xC950,0x4AD0,[ 0x80,0x4A,0x83,0x77,0xAA,0x51,0xC6,0xC4 ] };
    HRESULT Next(/+[out]+/ IBMDStreamingVideoEncodingMode * videoEncodingMode);
};

/* Interface IBMDStreamingDeviceInput - Created by QueryInterface from IDeckLink */

const GUID IID_IBMDStreamingDeviceInput = IBMDStreamingDeviceInput.iid;

interface IBMDStreamingDeviceInput : IUnknown
{
extern(System):
    static const GUID iid = { 0x24B6B6EC,0x1727,0x44BB,[ 0x98,0x18,0x34,0xFF,0x08,0x6A,0xCF,0x98 ] };

    /* Input modes */

    HRESULT DoesSupportVideoInputMode(in BMDDisplayMode inputMode, 
		/+[out]+/ BOOL* result);
    HRESULT GetVideoInputModeIterator(/+[out]+/ IDeckLinkDisplayModeIterator * iterator);
    HRESULT SetVideoInputMode(in BMDDisplayMode inputMode);
    HRESULT GetCurrentDetectedVideoInputMode(/+[out]+/ BMDDisplayMode* detectedMode);

    /* Capture modes */

    HRESULT GetVideoEncodingMode(/+[out]+/ IBMDStreamingVideoEncodingMode * encodingMode);
    HRESULT GetVideoEncodingModePresetIterator(in BMDDisplayMode inputMode, 
		/+[out]+/ IBMDStreamingVideoEncodingModePresetIterator * iterator);
    HRESULT DoesSupportVideoEncodingMode(in BMDDisplayMode inputMode, /+[in]+/ IBMDStreamingVideoEncodingMode encodingMode, 
		/+[out]+/ BMDStreamingEncodingSupport* result, 
		/+[out]+/ IBMDStreamingVideoEncodingMode * changedEncodingMode);
    HRESULT SetVideoEncodingMode(/+[in]+/ IBMDStreamingVideoEncodingMode encodingMode);

    /* Input control */

    HRESULT StartCapture();
    HRESULT StopCapture();
    HRESULT SetCallback(/+[in]+/ IUnknown theCallback);
};

/* Interface IBMDStreamingH264NALPacket - Represent an H.264 NAL packet */

const GUID IID_IBMDStreamingH264NALPacket = IBMDStreamingH264NALPacket.iid;

interface IBMDStreamingH264NALPacket : IUnknown
{
extern(System):
    static const GUID iid = { 0xE260E955,0x14BE,0x4395,[ 0x97,0x75,0x9F,0x02,0xCC,0x0A,0x9D,0x89 ] };
    int GetPayloadSize();
    HRESULT GetBytes(/+[out]+/ void** buffer);
    HRESULT GetBytesWithSizePrefix(/+[out]+/ void** buffer); // Contains a 32-bit unsigned big endian size prefix
    HRESULT GetDisplayTime(in ULONGLONG requestedTimeScale, 
		/+[out]+/ ULONGLONG* displayTime);
    HRESULT GetPacketIndex(/+[out]+/ uint* packetIndex);
};

/* Interface IBMDStreamingAudioPacket - Represents a chunk of audio data */

const GUID IID_IBMDStreamingAudioPacket = IBMDStreamingAudioPacket.iid;

interface IBMDStreamingAudioPacket : IUnknown
{
extern(System):
    static const GUID iid = { 0xD9EB5902,0x1AD2,0x43F4,[ 0x9E,0x2C,0x3C,0xFA,0x50,0xB5,0xEE,0x19 ] };
    BMDStreamingAudioCodec GetCodec();
    int GetPayloadSize();
    HRESULT GetBytes(/+[out]+/ void** buffer);
    HRESULT GetPlayTime(in ULONGLONG requestedTimeScale, 
		/+[out]+/ ULONGLONG* playTime);
    HRESULT GetPacketIndex(/+[out]+/ uint* packetIndex);
};

/* Interface IBMDStreamingMPEG2TSPacket - Represent an MPEG2 Transport Stream packet */

const GUID IID_IBMDStreamingMPEG2TSPacket = IBMDStreamingMPEG2TSPacket.iid;

interface IBMDStreamingMPEG2TSPacket : IUnknown
{
extern(System):
    static const GUID iid = { 0x91810D1C,0x4FB3,0x4AAA,[ 0xAE,0x56,0xFA,0x30,0x1D,0x3D,0xFA,0x4C ] };
    int GetPayloadSize();
    HRESULT GetBytes(/+[out]+/ void** buffer);
};

/* Interface IBMDStreamingH264NALParser - For basic NAL parsing */

const GUID IID_IBMDStreamingH264NALParser = IBMDStreamingH264NALParser.iid;

interface IBMDStreamingH264NALParser : IUnknown
{
extern(System):
    static const GUID iid = { 0x5867F18C,0x5BFA,0x4CCC,[ 0xB2,0xA7,0x9D,0xFD,0x14,0x04,0x17,0xD2 ] };
    HRESULT IsNALSequenceParameterSet(/+[in]+/ IBMDStreamingH264NALPacket nal);
    HRESULT IsNALPictureParameterSet(/+[in]+/ IBMDStreamingH264NALPacket nal);
    HRESULT GetProfileAndLevelFromSPS(/+[in]+/ IBMDStreamingH264NALPacket nal, 
		/+[out]+/ uint* profileIdc, 
		/+[out]+/ uint* profileCompatability, 
		/+[out]+/ uint* levelIdc);
};

const GUID CLSID_CBMDStreamingDiscovery = CBMDStreamingDiscovery.iid;

interface CBMDStreamingDiscovery
{
    static const GUID iid = { 0x0CAA31F6,0x8A26,0x40B0,[ 0x86,0xA4,0xBF,0x58,0xDC,0xCA,0x71,0x0C ] };
    /+
		/+[default]+/+/ /+ interface IBMDStreamingDiscovery; +/
};

const GUID CLSID_CBMDStreamingH264NALParser = CBMDStreamingH264NALParser.iid;

interface CBMDStreamingH264NALParser
{
    static const GUID iid = { 0x7753EFBD,0x951C,0x407C,[ 0x97,0xA5,0x23,0xC7,0x37,0xB7,0x3B,0x52 ] };
    /+
		/+[default]+/+/ /+ interface IBMDStreamingH264NALParser; +/
};

