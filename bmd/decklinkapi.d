// File generated by idl2d from
//   ../DeckLinkAPI.idl
module decklinkapi;
import decklink4d.port;

/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

/* DeckLink API */

/+[uuid(D864517A-EDD5-466D-867D-C819F1C052BB),
version(1.0), helpstring("DeckLink API Library")]+/ /+ library DeckLinkAPI +/

public import decklinkapitypes;
public import decklinkapimodes;
public import decklinkapidiscovery;
public import decklinkapiconfiguration;
public import decklinkapideckcontrol;
public import decklinkapistreaming;

// Type Declarations

// Enumeration Mapping

alias uint BMDFrameFlags;
alias uint BMDVideoInputFlags;
alias uint BMDVideoInputFormatChangedEvents;
alias uint BMDDetectedVideoInputFormatFlags;
alias uint BMDAnalogVideoFlags;
alias uint BMDDeviceBusyState; 

/* Enum BMDVideoOutputFlags - Flags to control the output of ancillary data along with video. */

enum 
		/+[v1_enum]+/ /+	_BMDVideoOutputFlags+/
{
    bmdVideoOutputFlagDefault                                    = 0,
    bmdVideoOutputVANC                                           = 1 << 0,
    bmdVideoOutputVITC                                           = 1 << 1,
    bmdVideoOutputRP188                                          = 1 << 2,
    bmdVideoOutputDualStream3D                                   = 1 << 4
}
alias int	_BMDVideoOutputFlags;
alias int BMDVideoOutputFlags;

/* Enum BMDFrameFlags - Frame flags */

/+[v1_enum]+/ enum /+	_BMDFrameFlags+/ : int 
{
    bmdFrameFlagDefault                                          = 0,
    bmdFrameFlagFlipVertical                                     = 1 << 0,

    /* Flags that are applicable only to instances of IDeckLinkVideoInputFrame */

    bmdFrameHasNoInputSource                                     = 1 << 31
}
alias int	_BMDFrameFlags;

/* Enum BMDVideoInputFlags - Flags applicable to video input */

/+[v1_enum]+/ enum /+	_BMDVideoInputFlags+/ : int 
{
    bmdVideoInputFlagDefault                                     = 0,
    bmdVideoInputEnableFormatDetection                           = 1 << 0,
    bmdVideoInputDualStream3D                                    = 1 << 1
}
alias int	_BMDVideoInputFlags;

/* Enum BMDVideoInputFormatChangedEvents - Bitmask passed to the VideoInputFormatChanged notification to identify the properties of the input signal that have changed */

/+[v1_enum]+/ enum /+	_BMDVideoInputFormatChangedEvents+/ : int 
{
    bmdVideoInputDisplayModeChanged                              = 1 << 0,
    bmdVideoInputFieldDominanceChanged                           = 1 << 1,
    bmdVideoInputColorspaceChanged                               = 1 << 2
}
alias int	_BMDVideoInputFormatChangedEvents;

/* Enum BMDDetectedVideoInputFormatFlags - Flags passed to the VideoInputFormatChanged notification to describe the detected video input signal */

/+[v1_enum]+/ enum /+	_BMDDetectedVideoInputFormatFlags+/ : int 
{
    bmdDetectedVideoInputYCbCr422                                = 1 << 0,
    bmdDetectedVideoInputRGB444                                  = 1 << 1
}
alias int	_BMDDetectedVideoInputFormatFlags;

/* Enum BMDOutputFrameCompletionResult - Frame Completion Callback */

enum 
		/+[v1_enum]+/ /+	_BMDOutputFrameCompletionResult+/
{
    bmdOutputFrameCompleted,                                    
    bmdOutputFrameDisplayedLate,                                
    bmdOutputFrameDropped,                                      
    bmdOutputFrameFlushed
}
alias int	_BMDOutputFrameCompletionResult;
alias int BMDOutputFrameCompletionResult;

/* Enum BMDReferenceStatus - GenLock input status */

enum 
		/+[v1_enum]+/ /+	_BMDReferenceStatus+/
{
    bmdReferenceNotSupportedByHardware                           = 1 << 0,
    bmdReferenceLocked                                           = 1 << 1
}
alias int	_BMDReferenceStatus;
alias int BMDReferenceStatus;

/* Enum BMDAudioSampleRate - Audio sample rates supported for output/input */

enum 
		/+[v1_enum]+/ /+	_BMDAudioSampleRate+/
{
    bmdAudioSampleRate48kHz                                      = 48000
}
alias int	_BMDAudioSampleRate;
alias int BMDAudioSampleRate;

/* Enum BMDAudioSampleType - Audio sample sizes supported for output/input */

enum 
		/+[v1_enum]+/ /+	_BMDAudioSampleType+/
{
    bmdAudioSampleType16bitInteger                               = 16,
    bmdAudioSampleType32bitInteger                               = 32
}
alias int	_BMDAudioSampleType;
alias int BMDAudioSampleType;

/* Enum BMDAudioOutputStreamType - Audio output stream type */

enum 
		/+[v1_enum]+/ /+	_BMDAudioOutputStreamType+/
{
    bmdAudioOutputStreamContinuous,                             
    bmdAudioOutputStreamContinuousDontResample,                 
    bmdAudioOutputStreamTimestamped
}
alias int	_BMDAudioOutputStreamType;
alias int BMDAudioOutputStreamType;

/* Enum BMDDisplayModeSupport - Output mode supported flags */

enum 
		/+[v1_enum]+/ /+	_BMDDisplayModeSupport+/
{
    bmdDisplayModeNotSupported                                   = 0,
    bmdDisplayModeSupported,                                    
    bmdDisplayModeSupportedWithConversion
}
alias int	_BMDDisplayModeSupport;
alias int BMDDisplayModeSupport;

/* Enum BMDTimecodeFormat - Timecode formats for frame metadata */

enum 
		/+[v1_enum]+/ /+	_BMDTimecodeFormat+/
{
    bmdTimecodeRP188VITC1                                        = /* 'rpv1' */ 0x72707631,	// RP188 timecode where DBB1 equals VITC1 (line 9)
    bmdTimecodeRP188VITC2                                        = /* 'rp12' */ 0x72703132,	// RP188 timecode where DBB1 equals VITC2 (line 571)
    bmdTimecodeRP188LTC                                          = /* 'rplt' */ 0x72706C74,	// RP188 timecode where DBB1 equals LTC (line 10)
    bmdTimecodeRP188Any                                          = /* 'rp18' */ 0x72703138,	// For capture: return the first valid timecode in {VITC1, LTC ,VITC2} - For playback: set the timecode as VITC1
    bmdTimecodeVITC                                              = /* 'vitc' */ 0x76697463,
    bmdTimecodeVITCField2                                        = /* 'vit2' */ 0x76697432,
    bmdTimecodeSerial                                            = /* 'seri' */ 0x73657269
}
alias int	_BMDTimecodeFormat;
alias int BMDTimecodeFormat;

/* Enum BMDAnalogVideoFlags - Analog video display flags */

/+[v1_enum]+/ enum /+	_BMDAnalogVideoFlags+/ : int 
{
    bmdAnalogVideoFlagCompositeSetup75                           = 1 << 0,
    bmdAnalogVideoFlagComponentBetacamLevels                     = 1 << 1
}
alias int	_BMDAnalogVideoFlags;

/* Enum BMDAudioConnection - Audio connection types */

enum 
		/+[v1_enum]+/ /+	_BMDAudioConnection+/
{
    bmdAudioConnectionEmbedded                                   = /* 'embd' */ 0x656D6264,
    bmdAudioConnectionAESEBU                                     = /* 'aes ' */ 0x61657320,
    bmdAudioConnectionAnalog                                     = /* 'anlg' */ 0x616E6C67,
    bmdAudioConnectionAnalogXLR                                  = /* 'axlr' */ 0x61786C72,
    bmdAudioConnectionAnalogRCA                                  = /* 'arca' */ 0x61726361
}
alias int	_BMDAudioConnection;
alias int BMDAudioConnection;

/* Enum BMDAudioOutputAnalogAESSwitch - Audio output Analog/AESEBU switch */

enum 
		/+[v1_enum]+/ /+	_BMDAudioOutputAnalogAESSwitch+/
{
    bmdAudioOutputSwitchAESEBU                                   = /* 'aes ' */ 0x61657320,
    bmdAudioOutputSwitchAnalog                                   = /* 'anlg' */ 0x616E6C67
}
alias int	_BMDAudioOutputAnalogAESSwitch;
alias int BMDAudioOutputAnalogAESSwitch;

/* Enum BMDVideoOutputConversionMode - Video/audio conversion mode */

enum 
		/+[v1_enum]+/ /+	_BMDVideoOutputConversionMode+/
{
    bmdNoVideoOutputConversion                                   = /* 'none' */ 0x6E6F6E65,
    bmdVideoOutputLetterboxDownconversion                        = /* 'ltbx' */ 0x6C746278,
    bmdVideoOutputAnamorphicDownconversion                       = /* 'amph' */ 0x616D7068,
    bmdVideoOutputHD720toHD1080Conversion                        = /* '720c' */ 0x37323063,
    bmdVideoOutputHardwareLetterboxDownconversion                = /* 'HWlb' */ 0x48576C62,
    bmdVideoOutputHardwareAnamorphicDownconversion               = /* 'HWam' */ 0x4857616D,
    bmdVideoOutputHardwareCenterCutDownconversion                = /* 'HWcc' */ 0x48576363,
    bmdVideoOutputHardware720p1080pCrossconversion               = /* 'xcap' */ 0x78636170,
    bmdVideoOutputHardwareAnamorphic720pUpconversion             = /* 'ua7p' */ 0x75613770,
    bmdVideoOutputHardwareAnamorphic1080iUpconversion            = /* 'ua1i' */ 0x75613169,
    bmdVideoOutputHardwareAnamorphic149To720pUpconversion        = /* 'u47p' */ 0x75343770,
    bmdVideoOutputHardwareAnamorphic149To1080iUpconversion       = /* 'u41i' */ 0x75343169,
    bmdVideoOutputHardwarePillarbox720pUpconversion              = /* 'up7p' */ 0x75703770,
    bmdVideoOutputHardwarePillarbox1080iUpconversion             = /* 'up1i' */ 0x75703169
}
alias int	_BMDVideoOutputConversionMode;
alias int BMDVideoOutputConversionMode;

/* Enum BMDVideoInputConversionMode - Video input conversion mode */

enum 
		/+[v1_enum]+/ /+	_BMDVideoInputConversionMode+/
{
    bmdNoVideoInputConversion                                    = /* 'none' */ 0x6E6F6E65,
    bmdVideoInputLetterboxDownconversionFromHD1080               = /* '10lb' */ 0x31306C62,
    bmdVideoInputAnamorphicDownconversionFromHD1080              = /* '10am' */ 0x3130616D,
    bmdVideoInputLetterboxDownconversionFromHD720                = /* '72lb' */ 0x37326C62,
    bmdVideoInputAnamorphicDownconversionFromHD720               = /* '72am' */ 0x3732616D,
    bmdVideoInputLetterboxUpconversion                           = /* 'lbup' */ 0x6C627570,
    bmdVideoInputAnamorphicUpconversion                          = /* 'amup' */ 0x616D7570
}
alias int	_BMDVideoInputConversionMode;
alias int BMDVideoInputConversionMode;

/* Enum BMDVideo3DPackingFormat - Video 3D packing format */

enum 
		/+[v1_enum]+/ /+	_BMDVideo3DPackingFormat+/
{
    bmdVideo3DPackingSidebySideHalf                              = /* 'sbsh' */ 0x73627368,
    bmdVideo3DPackingLinebyLine                                  = /* 'lbyl' */ 0x6C62796C,
    bmdVideo3DPackingTopAndBottom                                = /* 'tabo' */ 0x7461626F,
    bmdVideo3DPackingFramePacking                                = /* 'frpk' */ 0x6672706B,
    bmdVideo3DPackingLeftOnly                                    = /* 'left' */ 0x6C656674,
    bmdVideo3DPackingRightOnly                                   = /* 'righ' */ 0x72696768
}
alias int	_BMDVideo3DPackingFormat;
alias int BMDVideo3DPackingFormat;

/* Enum BMDIdleVideoOutputOperation - Video output operation when not playing video */

enum 
		/+[v1_enum]+/ /+	_BMDIdleVideoOutputOperation+/
{
    bmdIdleVideoOutputBlack                                      = /* 'blac' */ 0x626C6163,
    bmdIdleVideoOutputLastFrame                                  = /* 'lafa' */ 0x6C616661,
    bmdIdleVideoOutputDesktop                                    = /* 'desk' */ 0x6465736B
}
alias int	_BMDIdleVideoOutputOperation;
alias int BMDIdleVideoOutputOperation;

/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */

enum 
		/+[v1_enum]+/ /+	_BMDDeckLinkAttributeID+/
{

    /* Flags */

    BMDDeckLinkSupportsInternalKeying                            = /* 'keyi' */ 0x6B657969,
    BMDDeckLinkSupportsExternalKeying                            = /* 'keye' */ 0x6B657965,
    BMDDeckLinkSupportsHDKeying                                  = /* 'keyh' */ 0x6B657968,
    BMDDeckLinkSupportsInputFormatDetection                      = /* 'infd' */ 0x696E6664,
    BMDDeckLinkHasReferenceInput                                 = /* 'hrin' */ 0x6872696E,
    BMDDeckLinkHasSerialPort                                     = /* 'hspt' */ 0x68737074,
    BMDDeckLinkHasAnalogVideoOutputGain                          = /* 'avog' */ 0x61766F67,
    BMDDeckLinkCanOnlyAdjustOverallVideoOutputGain               = /* 'ovog' */ 0x6F766F67,
    BMDDeckLinkHasVideoInputAntiAliasingFilter                   = /* 'aafl' */ 0x6161666C,
    BMDDeckLinkHasBypass                                         = /* 'byps' */ 0x62797073,
    BMDDeckLinkSupportsDesktopDisplay                            = /* 'extd' */ 0x65787464,
    BMDDeckLinkSupportsClockTimingAdjustment                     = /* 'ctad' */ 0x63746164,

    /* Integers */

    BMDDeckLinkMaximumAudioChannels                              = /* 'mach' */ 0x6D616368,
    BMDDeckLinkNumberOfSubDevices                                = /* 'nsbd' */ 0x6E736264,
    BMDDeckLinkSubDeviceIndex                                    = /* 'subi' */ 0x73756269,
    BMDDeckLinkVideoOutputConnections                            = /* 'vocn' */ 0x766F636E,
    BMDDeckLinkVideoInputConnections                             = /* 'vicn' */ 0x7669636E,
    BMDDeckLinkDeviceBusyState                                   = /* 'dbst' */ 0x64627374,
    BMDDeckLinkVideoIOSupport                                    = /* 'vios' */ 0x76696F73,	// Returns a BMDVideoIOSupport bit field

    /* Floats */

    BMDDeckLinkVideoInputGainMinimum                             = /* 'vigm' */ 0x7669676D,
    BMDDeckLinkVideoInputGainMaximum                             = /* 'vigx' */ 0x76696778,
    BMDDeckLinkVideoOutputGainMinimum                            = /* 'vogm' */ 0x766F676D,
    BMDDeckLinkVideoOutputGainMaximum                            = /* 'vogx' */ 0x766F6778,

    /* Strings */

    BMDDeckLinkSerialPortDeviceName                              = /* 'slpn' */ 0x736C706E
}
alias int	_BMDDeckLinkAttributeID;
alias int BMDDeckLinkAttributeID;

/* Enum BMDDeckLinkAPIInformationID - DeckLinkAPI information ID */

enum 
		/+[v1_enum]+/ /+	_BMDDeckLinkAPIInformationID+/
{
    BMDDeckLinkAPIVersion                                        = /* 'vers' */ 0x76657273
}
alias int	_BMDDeckLinkAPIInformationID;
alias int BMDDeckLinkAPIInformationID;

/* Enum BMDDeviceBusyState - Current device busy state */

/+[v1_enum]+/ enum /+	_BMDDeviceBusyState+/ : int 
{
    bmdDeviceCaptureBusy                                         = 1 << 0,
    bmdDevicePlaybackBusy                                        = 1 << 1,
    bmdDeviceSerialPortBusy                                      = 1 << 2
}
alias int	_BMDDeviceBusyState;

/* Enum BMDVideoIOSupport - Device video input/output support */

enum 
		/+[v1_enum]+/ /+	_BMDVideoIOSupport+/
{
    bmdDeviceSupportsCapture                                     = 1 << 0,
    bmdDeviceSupportsPlayback                                    = 1 << 1
}
alias int	_BMDVideoIOSupport;
alias int BMDVideoIOSupport;

/* Enum BMD3DPreviewFormat - Linked Frame preview format */

enum 
		/+[v1_enum]+/ /+	_BMD3DPreviewFormat+/
{
    bmd3DPreviewFormatDefault                                    = /* 'defa' */ 0x64656661,
    bmd3DPreviewFormatLeftOnly                                   = /* 'left' */ 0x6C656674,
    bmd3DPreviewFormatRightOnly                                  = /* 'righ' */ 0x72696768,
    bmd3DPreviewFormatSideBySide                                 = /* 'side' */ 0x73696465,
    bmd3DPreviewFormatTopBottom                                  = /* 'topb' */ 0x746F7062
}
alias int	_BMD3DPreviewFormat;
alias int BMD3DPreviewFormat;

/* Enum BMDNotifications - Events that can be subscribed through IDeckLinkNotification */

enum 
		/+[v1_enum]+/ /+	_BMDNotifications+/
{
    bmdPreferencesChanged                                        = /* 'pref' */ 0x70726566
}
alias int	_BMDNotifications;
alias int BMDNotifications;

// Forward Declarations

/+ interface IDeckLinkVideoOutputCallback; +/
/+ interface IDeckLinkInputCallback; +/
/+ interface IDeckLinkMemoryAllocator; +/
/+ interface IDeckLinkAudioOutputCallback; +/
/+ interface IDeckLinkIterator; +/
/+ interface IDeckLinkAPIInformation; +/
/+ interface IDeckLinkOutput; +/
/+ interface IDeckLinkInput; +/
/+ interface IDeckLinkVideoFrame; +/
/+ interface IDeckLinkMutableVideoFrame; +/
/+ interface IDeckLinkVideoFrame3DExtensions; +/
/+ interface IDeckLinkVideoInputFrame; +/
/+ interface IDeckLinkVideoFrameAncillary; +/
/+ interface IDeckLinkAudioInputPacket; +/
/+ interface IDeckLinkScreenPreviewCallback; +/
/+ interface IDeckLinkGLScreenPreviewHelper; +/
/+ interface IDeckLinkDX9ScreenPreviewHelper; +/
/+ interface IDeckLinkNotificationCallback; +/
/+ interface IDeckLinkNotification; +/
/+ interface IDeckLinkAttributes; +/
/+ interface IDeckLinkKeyer; +/
/+ interface IDeckLinkVideoConversion; +/

/* Interface IDeckLinkVideoOutputCallback - Frame completion callback. */

const GUID IID_IDeckLinkVideoOutputCallback = IDeckLinkVideoOutputCallback.iid;

interface IDeckLinkVideoOutputCallback : IUnknown
{
extern(System):
    static const GUID iid = { 0x20AA5225,0x1958,0x47CB,[ 0x82,0x0B,0x80,0xA8,0xD5,0x21,0xA6,0xEE ] };
    HRESULT ScheduledFrameCompleted(/+[in]+/ IDeckLinkVideoFrame completedFrame, in BMDOutputFrameCompletionResult result);
    HRESULT ScheduledPlaybackHasStopped();
};

/* Interface IDeckLinkInputCallback - Frame arrival callback. */

const GUID IID_IDeckLinkInputCallback = IDeckLinkInputCallback.iid;

interface IDeckLinkInputCallback : IUnknown
{
extern(System):
    static const GUID iid = { 0xDD04E5EC,0x7415,0x42AB,[ 0xAE,0x4A,0xE8,0x0C,0x4D,0xFC,0x04,0x4A ] };
    HRESULT VideoInputFormatChanged(in BMDVideoInputFormatChangedEvents notificationEvents, /+[in]+/ IDeckLinkDisplayMode newDisplayMode, in BMDDetectedVideoInputFormatFlags detectedSignalFlags);
    HRESULT VideoInputFrameArrived(/+[in]+/ IDeckLinkVideoInputFrame videoFrame, /+[in]+/ IDeckLinkAudioInputPacket audioPacket);
};

/* Interface IDeckLinkMemoryAllocator - Memory allocator for video frames. */

const GUID IID_IDeckLinkMemoryAllocator = IDeckLinkMemoryAllocator.iid;

interface IDeckLinkMemoryAllocator : IUnknown
{
extern(System):
    static const GUID iid = { 0xB36EB6E7,0x9D29,0x4AA8,[ 0x92,0xEF,0x84,0x3B,0x87,0xA2,0x89,0xE8 ] };
    HRESULT AllocateBuffer(in uint bufferSize, 
		/+[out]+/ void **allocatedBuffer);
    HRESULT ReleaseBuffer(in void *buffer);

    HRESULT Commit();
    HRESULT Decommit();
};

/* Interface IDeckLinkAudioOutputCallback - Optional callback to allow audio samples to be pulled as required. */

const GUID IID_IDeckLinkAudioOutputCallback = IDeckLinkAudioOutputCallback.iid;

interface IDeckLinkAudioOutputCallback : IUnknown
{
extern(System):
    static const GUID iid = { 0x403C681B,0x7F46,0x4A12,[ 0xB9,0x93,0x2B,0xB1,0x27,0x08,0x4E,0xE6 ] };
    HRESULT RenderAudioSamples(in BOOL preroll);
};

/* Interface IDeckLinkIterator - enumerates installed DeckLink hardware */

const GUID IID_IDeckLinkIterator = IDeckLinkIterator.iid;

interface IDeckLinkIterator : IUnknown
{
extern(System):
    static const GUID iid = { 0x50FB36CD,0x3063,0x4B73,[ 0xBD,0xBB,0x95,0x80,0x87,0xF2,0xD8,0xBA ] };
    HRESULT Next(/+[out]+/ IDeckLink *deckLinkInstance);
};

/* Interface IDeckLinkAPIInformation - DeckLinkAPI attribute interface */

const GUID IID_IDeckLinkAPIInformation = IDeckLinkAPIInformation.iid;

interface IDeckLinkAPIInformation : IUnknown
{
extern(System):
    static const GUID iid = { 0x7BEA3C68,0x730D,0x4322,[ 0xAF,0x34,0x8A,0x71,0x52,0xB5,0x32,0xA4 ] };
    HRESULT GetFlag(in BMDDeckLinkAPIInformationID cfgID, 
		/+[out]+/ BOOL *value);
    HRESULT GetInt(in BMDDeckLinkAPIInformationID cfgID, 
		/+[out]+/ LONGLONG *value);
    HRESULT GetFloat(in BMDDeckLinkAPIInformationID cfgID, 
		/+[out]+/ double *value);
    HRESULT GetString(in BMDDeckLinkAPIInformationID cfgID, 
		/+[out]+/ BMDSTR *value);
};

/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */

const GUID IID_IDeckLinkOutput = IDeckLinkOutput.iid;

interface IDeckLinkOutput : IUnknown
{
extern(System):
    static const GUID iid = { 0xA3EF0963,0x0862,0x44ED,[ 0x92,0xA9,0xEE,0x89,0xAB,0xF4,0x31,0xC7 ] };
    HRESULT DoesSupportVideoMode(in BMDDisplayMode displayMode, in BMDPixelFormat pixelFormat, in BMDVideoOutputFlags flags, 
		/+[out]+/ BMDDisplayModeSupport *result, 
		/+[out]+/ IDeckLinkDisplayMode *resultDisplayMode);
    HRESULT GetDisplayModeIterator(/+[out]+/ IDeckLinkDisplayModeIterator *iterator);

    HRESULT SetScreenPreviewCallback(/+[in]+/ IDeckLinkScreenPreviewCallback previewCallback);

    /* Video Output */

    HRESULT EnableVideoOutput(in BMDDisplayMode displayMode, in BMDVideoOutputFlags flags);
    HRESULT DisableVideoOutput();

    HRESULT SetVideoOutputFrameMemoryAllocator(/+[in]+/ IDeckLinkMemoryAllocator theAllocator);
    HRESULT CreateVideoFrame(in int width, in int height, in int rowBytes, in BMDPixelFormat pixelFormat, in BMDFrameFlags flags, 
		/+[out]+/ IDeckLinkMutableVideoFrame *outFrame);
    HRESULT CreateAncillaryData(in BMDPixelFormat pixelFormat, 
		/+[out]+/ IDeckLinkVideoFrameAncillary *outBuffer);

    HRESULT DisplayVideoFrameSync(/+[in]+/ IDeckLinkVideoFrame theFrame);
    HRESULT ScheduleVideoFrame(/+[in]+/ IDeckLinkVideoFrame theFrame, in BMDTimeValue displayTime, in BMDTimeValue displayDuration, in BMDTimeScale timeScale);
    HRESULT SetScheduledFrameCompletionCallback(/+[in]+/ IDeckLinkVideoOutputCallback theCallback);
    HRESULT GetBufferedVideoFrameCount(/+[out]+/ uint *bufferedFrameCount);

    /* Audio Output */

    HRESULT EnableAudioOutput(in BMDAudioSampleRate sampleRate, in BMDAudioSampleType sampleType, in uint channelCount, in BMDAudioOutputStreamType streamType);
    HRESULT DisableAudioOutput();

    HRESULT WriteAudioSamplesSync(in void *buffer, in uint sampleFrameCount, 
		/+[out]+/ uint *sampleFramesWritten);

    HRESULT BeginAudioPreroll();
    HRESULT EndAudioPreroll();
    HRESULT ScheduleAudioSamples(in void *buffer, in uint sampleFrameCount, in BMDTimeValue streamTime, in BMDTimeScale timeScale, 
		/+[out]+/ uint *sampleFramesWritten);

    HRESULT GetBufferedAudioSampleFrameCount(/+[out]+/ uint *bufferedSampleFrameCount);
    HRESULT FlushBufferedAudioSamples();

    HRESULT SetAudioCallback(/+[in]+/ IDeckLinkAudioOutputCallback theCallback);

    /* Output Control */

    HRESULT StartScheduledPlayback(in BMDTimeValue playbackStartTime, in BMDTimeScale timeScale, in double playbackSpeed);
    HRESULT StopScheduledPlayback(in BMDTimeValue stopPlaybackAtTime, 
		/+[out]+/ BMDTimeValue *actualStopTime, in BMDTimeScale timeScale);
    HRESULT IsScheduledPlaybackRunning(/+[out]+/ BOOL *active);
    HRESULT GetScheduledStreamTime(in BMDTimeScale desiredTimeScale, 
		/+[out]+/ BMDTimeValue *streamTime, 
		/+[out]+/ double *playbackSpeed);
    HRESULT GetReferenceStatus(/+[out]+/ BMDReferenceStatus *referenceStatus);

    /* Hardware Timing */

    HRESULT GetHardwareReferenceClock(in BMDTimeScale desiredTimeScale, 
		/+[out]+/ BMDTimeValue *hardwareTime, 
		/+[out]+/ BMDTimeValue *timeInFrame, 
		/+[out]+/ BMDTimeValue *ticksPerFrame);
};

/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */

const GUID IID_IDeckLinkInput = IDeckLinkInput.iid;

interface IDeckLinkInput : IUnknown
{
extern(System):
    static const GUID iid = { 0xAF22762B,0xDFAC,0x4846,[ 0xAA,0x79,0xFA,0x88,0x83,0x56,0x09,0x95 ] };
    HRESULT DoesSupportVideoMode(in BMDDisplayMode displayMode, in BMDPixelFormat pixelFormat, in BMDVideoInputFlags flags, 
		/+[out]+/ BMDDisplayModeSupport *result, 
		/+[out]+/ IDeckLinkDisplayMode *resultDisplayMode);
    HRESULT GetDisplayModeIterator(/+[out]+/ IDeckLinkDisplayModeIterator *iterator);

    HRESULT SetScreenPreviewCallback(/+[in]+/ IDeckLinkScreenPreviewCallback previewCallback);

    /* Video Input */

    HRESULT EnableVideoInput(in BMDDisplayMode displayMode, in BMDPixelFormat pixelFormat, in BMDVideoInputFlags flags);
    HRESULT DisableVideoInput();
    HRESULT GetAvailableVideoFrameCount(/+[out]+/ uint *availableFrameCount);
    HRESULT SetVideoInputFrameMemoryAllocator(/+[in]+/ IDeckLinkMemoryAllocator theAllocator);

    /* Audio Input */

    HRESULT EnableAudioInput(in BMDAudioSampleRate sampleRate, in BMDAudioSampleType sampleType, in uint channelCount);
    HRESULT DisableAudioInput();
    HRESULT GetAvailableAudioSampleFrameCount(/+[out]+/ uint *availableSampleFrameCount);

    /* Input Control */

    HRESULT StartStreams();
    HRESULT StopStreams();
    HRESULT PauseStreams();
    HRESULT FlushStreams();
    HRESULT SetCallback(/+[in]+/ IDeckLinkInputCallback theCallback);

    /* Hardware Timing */

    HRESULT GetHardwareReferenceClock(in BMDTimeScale desiredTimeScale, 
		/+[out]+/ BMDTimeValue *hardwareTime, 
		/+[out]+/ BMDTimeValue *timeInFrame, 
		/+[out]+/ BMDTimeValue *ticksPerFrame);
};

/* Interface IDeckLinkVideoFrame - Interface to encapsulate a video frame; can be caller-implemented. */

const GUID IID_IDeckLinkVideoFrame = IDeckLinkVideoFrame.iid;

interface IDeckLinkVideoFrame : IUnknown
{
extern(System):
    static const GUID iid = { 0x3F716FE0,0xF023,0x4111,[ 0xBE,0x5D,0xEF,0x44,0x14,0xC0,0x5B,0x17 ] };
    int GetWidth();
    int GetHeight();
    int GetRowBytes();
    BMDPixelFormat GetPixelFormat();
    BMDFrameFlags GetFlags();
    HRESULT GetBytes(/+[out]+/ void **buffer);

    HRESULT GetTimecode(in BMDTimecodeFormat format, 
		/+[out]+/ IDeckLinkTimecode *timecode);
    HRESULT GetAncillaryData(/+[out]+/ IDeckLinkVideoFrameAncillary *ancillary);
};

/* Interface IDeckLinkMutableVideoFrame - Created by IDeckLinkOutput::CreateVideoFrame. */

const GUID IID_IDeckLinkMutableVideoFrame = IDeckLinkMutableVideoFrame.iid;

interface IDeckLinkMutableVideoFrame : IDeckLinkVideoFrame
{
    static const GUID iid = { 0x69E2639F,0x40DA,0x4E19,[ 0xB6,0xF2,0x20,0xAC,0xE8,0x15,0xC3,0x90 ] };
    HRESULT SetFlags(in BMDFrameFlags newFlags);

    HRESULT SetTimecode(in BMDTimecodeFormat format, /+[in]+/ IDeckLinkTimecode timecode);
    HRESULT SetTimecodeFromComponents(in BMDTimecodeFormat format, in ubyte hours, in ubyte minutes, in ubyte seconds, in ubyte frames, in BMDTimecodeFlags flags);
    HRESULT SetAncillaryData(/+[in]+/ IDeckLinkVideoFrameAncillary ancillary);
    HRESULT SetTimecodeUserBits(in BMDTimecodeFormat format, in BMDTimecodeUserBits userBits);
};

/* Interface IDeckLinkVideoFrame3DExtensions - Optional interface implemented on IDeckLinkVideoFrame to support 3D frames */

const GUID IID_IDeckLinkVideoFrame3DExtensions = IDeckLinkVideoFrame3DExtensions.iid;

interface IDeckLinkVideoFrame3DExtensions : IUnknown
{
extern(System):
    static const GUID iid = { 0xDA0F7E4A,0xEDC7,0x48A8,[ 0x9C,0xDD,0x2D,0xB5,0x1C,0x72,0x9C,0xD7 ] };
    BMDVideo3DPackingFormat Get3DPackingFormat();
    HRESULT GetFrameForRightEye(/+[out]+/ IDeckLinkVideoFrame *rightEyeFrame);
};

/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */

const GUID IID_IDeckLinkVideoInputFrame = IDeckLinkVideoInputFrame.iid;

interface IDeckLinkVideoInputFrame : IDeckLinkVideoFrame
{
    static const GUID iid = { 0x05CFE374,0x537C,0x4094,[ 0x9A,0x57,0x68,0x05,0x25,0x11,0x8F,0x44 ] };
    HRESULT GetStreamTime(/+[out]+/ BMDTimeValue *frameTime, 
		/+[out]+/ BMDTimeValue *frameDuration, in BMDTimeScale timeScale);
    HRESULT GetHardwareReferenceTimestamp(in BMDTimeScale timeScale, 
		/+[out]+/ BMDTimeValue *frameTime, 
		/+[out]+/ BMDTimeValue *frameDuration);
};

/* Interface IDeckLinkVideoFrameAncillary - Obtained through QueryInterface() on an IDeckLinkVideoFrame object. */

const GUID IID_IDeckLinkVideoFrameAncillary = IDeckLinkVideoFrameAncillary.iid;

interface IDeckLinkVideoFrameAncillary : IUnknown
{
extern(System):
    static const GUID iid = { 0x732E723C,0xD1A4,0x4E29,[ 0x9E,0x8E,0x4A,0x88,0x79,0x7A,0x00,0x04 ] };

    HRESULT GetBufferForVerticalBlankingLine(in uint lineNumber, 
		/+[out]+/ void **buffer);
    BMDPixelFormat GetPixelFormat();
    BMDDisplayMode GetDisplayMode();
};

/* Interface IDeckLinkAudioInputPacket - Provided by the IDeckLinkInput callback. */

const GUID IID_IDeckLinkAudioInputPacket = IDeckLinkAudioInputPacket.iid;

interface IDeckLinkAudioInputPacket : IUnknown
{
extern(System):
    static const GUID iid = { 0xE43D5870,0x2894,0x11DE,[ 0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66 ] };
    int GetSampleFrameCount();
    HRESULT GetBytes(/+[out]+/ void **buffer);
    HRESULT GetPacketTime(/+[out]+/ BMDTimeValue *packetTime, in BMDTimeScale timeScale);
};

/* Interface IDeckLinkScreenPreviewCallback - Screen preview callback */

const GUID IID_IDeckLinkScreenPreviewCallback = IDeckLinkScreenPreviewCallback.iid;

interface IDeckLinkScreenPreviewCallback : IUnknown
{
extern(System):
    static const GUID iid = { 0xB1D3F49A,0x85FE,0x4C5D,[ 0x95,0xC8,0x0B,0x5D,0x5D,0xCC,0xD4,0x38 ] };
    HRESULT DrawFrame(/+[in]+/ IDeckLinkVideoFrame theFrame);
};

/* Interface IDeckLinkGLScreenPreviewHelper - Created with CoCreateInstance(). */

const GUID IID_IDeckLinkGLScreenPreviewHelper = IDeckLinkGLScreenPreviewHelper.iid;

interface IDeckLinkGLScreenPreviewHelper : IUnknown
{
extern(System):
    static const GUID iid = { 0x504E2209,0xCAC7,0x4C1A,[ 0x9F,0xB4,0xC5,0xBB,0x62,0x74,0xD2,0x2F ] };

    /* Methods must be called with OpenGL context set */

    HRESULT InitializeGL();
    HRESULT PaintGL();
    HRESULT SetFrame(/+[in]+/ IDeckLinkVideoFrame theFrame);
    HRESULT Set3DPreviewFormat(in BMD3DPreviewFormat previewFormat);
};

version (Windows)
{
/* Interface IDeckLinkDX9ScreenPreviewHelper - Created with CoCreateInstance(). */

const GUID IID_IDeckLinkDX9ScreenPreviewHelper = IDeckLinkDX9ScreenPreviewHelper.iid;

interface IDeckLinkDX9ScreenPreviewHelper : IUnknown
{
extern(System):
    static const GUID iid = { 0x2094B522,0xD1A1,0x40C0,[ 0x9A,0xC7,0x1C,0x01,0x22,0x18,0xEF,0x02 ] };
    HRESULT Initialize(in void *device);
    HRESULT Render(in RECT *rc);
    HRESULT SetFrame(/+[in]+/ IDeckLinkVideoFrame theFrame);
    HRESULT Set3DPreviewFormat(in BMD3DPreviewFormat previewFormat);
};
}

/* Interface IDeckLinkNotificationCallback - DeckLink Notification Callback Interface */

const GUID IID_IDeckLinkNotificationCallback = IDeckLinkNotificationCallback.iid;

interface IDeckLinkNotificationCallback : IUnknown
{
extern(System):
    static const GUID iid = { 0xb002a1ec,0x070d,0x4288,[ 0x82,0x89,0xbd,0x5d,0x36,0xe5,0xff,0x0d ] };
    HRESULT Notify(in BMDNotifications topic, in ULONGLONG param1, in ULONGLONG param2);
};

/* Interface IDeckLinkNotification - DeckLink Notification interface */

const GUID IID_IDeckLinkNotification = IDeckLinkNotification.iid;

interface IDeckLinkNotification : IUnknown
{
extern(System):
    static const GUID iid = { 0x0a1fb207,0xe215,0x441b,[ 0x9b,0x19,0x6f,0xa1,0x57,0x59,0x46,0xc5 ] };
    HRESULT Subscribe(in BMDNotifications topic, /+[in]+/ IDeckLinkNotificationCallback theCallback);
    HRESULT Unsubscribe(in BMDNotifications topic, /+[in]+/ IDeckLinkNotificationCallback theCallback);
};

/* Interface IDeckLinkAttributes - DeckLink Attribute interface */

const GUID IID_IDeckLinkAttributes = IDeckLinkAttributes.iid;

interface IDeckLinkAttributes : IUnknown
{
extern(System):
    static const GUID iid = { 0xABC11843,0xD966,0x44CB,[ 0x96,0xE2,0xA1,0xCB,0x5D,0x31,0x35,0xC4 ] };
    HRESULT GetFlag(in BMDDeckLinkAttributeID cfgID, 
		/+[out]+/ BOOL *value);
    HRESULT GetInt(in BMDDeckLinkAttributeID cfgID, 
		/+[out]+/ LONGLONG *value);
    HRESULT GetFloat(in BMDDeckLinkAttributeID cfgID, 
		/+[out]+/ double *value);
    HRESULT GetString(in BMDDeckLinkAttributeID cfgID, 
		/+[out]+/ BMDSTR *value);
};

/* Interface IDeckLinkKeyer - DeckLink Keyer interface */

const GUID IID_IDeckLinkKeyer = IDeckLinkKeyer.iid;

interface IDeckLinkKeyer : IUnknown
{
extern(System):
    static const GUID iid = { 0x89AFCAF5,0x65F8,0x421E,[ 0x98,0xF7,0x96,0xFE,0x5F,0x5B,0xFB,0xA3 ] };
    HRESULT Enable(in BOOL isExternal);
    HRESULT SetLevel(in ubyte level);
    HRESULT RampUp(in uint numberOfFrames);
    HRESULT RampDown(in uint numberOfFrames);
    HRESULT Disable();
};

/* Interface IDeckLinkVideoConversion - Created with CoCreateInstance(). */

const GUID IID_IDeckLinkVideoConversion = IDeckLinkVideoConversion.iid;

interface IDeckLinkVideoConversion : IUnknown
{
extern(System):
    static const GUID iid = { 0x3BBCB8A2,0xDA2C,0x42D9,[ 0xB5,0xD8,0x88,0x08,0x36,0x44,0xE9,0x9A ] };
    HRESULT ConvertFrame(/+[in]+/ IDeckLinkVideoFrame srcFrame, /+[in]+/ IDeckLinkVideoFrame dstFrame);
};

const GUID CLSID_CDeckLinkIterator = CDeckLinkIterator.iid;

interface CDeckLinkIterator
{
    static const GUID iid = { 0x1F2E109A,0x8F4F,0x49E4,[ 0x92,0x03,0x13,0x55,0x95,0xCB,0x6F,0xA5 ] };
    /+
		/+[default]+/+/ /+ interface IDeckLinkIterator; +/
};

const GUID CLSID_CDeckLinkAPIInformation = CDeckLinkAPIInformation.iid;

interface CDeckLinkAPIInformation
{
    static const GUID iid = { 0x263CA19F,0xED09,0x482E,[ 0x9F,0x9D,0x84,0x00,0x57,0x83,0xA2,0x37 ] };
    /+
		/+[default]+/+/ /+ interface IDeckLinkAPIInformation; +/
};

const GUID CLSID_CDeckLinkGLScreenPreviewHelper = CDeckLinkGLScreenPreviewHelper.iid;

interface CDeckLinkGLScreenPreviewHelper
{
    static const GUID iid = { 0xF63E77C7,0xB655,0x4A4A,[ 0x9A,0xD0,0x3C,0xA8,0x5D,0x39,0x43,0x43 ] };
    /+
		/+[default]+/+/ /+ interface IDeckLinkGLScreenPreviewHelper; +/
};

const GUID CLSID_CDeckLinkDX9ScreenPreviewHelper = CDeckLinkDX9ScreenPreviewHelper.iid;

interface CDeckLinkDX9ScreenPreviewHelper
{
    static const GUID iid = { 0xCC010023,0xE01D,0x4525,[ 0x9D,0x59,0x80,0xC8,0xAB,0x3D,0xC7,0xA0 ] };
    /+
		/+[default]+/+/ /+ interface IDeckLinkDX9ScreenPreviewHelper; +/
};

const GUID CLSID_CDeckLinkVideoConversion = CDeckLinkVideoConversion.iid;

interface CDeckLinkVideoConversion
{
    static const GUID iid = { 0x7DBBBB11,0x5B7B,0x467D,[ 0xAE,0xA4,0xCE,0xA4,0x68,0xFD,0x36,0x8C ] };
    /+
		/+[default]+/+/ /+ interface IDeckLinkVideoConversion; +/
};
